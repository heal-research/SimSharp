<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;net45</TargetFrameworks>
    <SignAssembly>True</SignAssembly>
    <AssemblyOriginatorKeyFile>SimSharp.snk</AssemblyOriginatorKeyFile>
    <DelaySign>False</DelaySign>
    <AssemblyName>SimSharp</AssemblyName>
    <RootNamespace>SimSharp</RootNamespace>
    <Version>3.4</Version>
    <Authors>Andreas Beham</Authors>
    <Description>Sim# aims to port the concepts used in SimPy (https://pypi.python.org/pypi/simpy) to the .NET world. It is implemented in C# and builds on the .NET Framework 4.5 / .NET Standard 2.0. Sim# uses an efficient event queue (adapted from https://github.com/BlueRaja/High-Speed-Priority-Queue-for-C-Sharp). The MachineShop benchmark comes close to 3.5 million events per second on a Core i7-7 2.7Ghz.

Sim# allows modeling processes easily and with little boiler plate code. A process is described as a method that yields events. When an event is yielded, the process waits on it. Processes are themselves events and so it is convenient to spawn sub-processes that can either be waited upon or that run next to each other. There is no need to inherit from classes or understand a complex object oriented design.</Description>
    <Product>Sim#</Product>
    <Company>HEAL, FH Upper Austria</Company>
    <Copyright>Andreas Beham</Copyright>
    <PackageProjectUrl>https://github.com/heal-research/SimSharp</PackageProjectUrl>
    <PackageReleaseNotes>Sim# 3.4 contains two enhancements, two bug fixes, and some deprecations.
    
    Enhancement
    1) Adds implementations of sampling from distributions in form of classes and an IDistribtion interface.
    2) Added sampling from Erlang distributions
    
    Bug fixes - it fixes two bugs in the Simulation class
    1) The supplied instance of the random number generator was ignored in the RandChoiceOnline&lt;T&gt; methods.
    2) The parameters alpha and beta for the Weibull distribution have been reversed (alpha is now shape and beta is scale)

    Deprecations
    1) All of the RandXXX methods in class Simulation have been marked as obsolete.
    2) All of the random TimeoutXXX methods in class Simulation have been marked as obsolete.

    To port code, it is advised to add &quot;using static SimSharp.Distributions&quot; to the using section and change e.g.
    env.RandUniform(1, 2) to env.Rand(UNIF(1, 2))
    env.RandNormalPositive(3, 0.5) to env.Rand(POS(N(3, 0.5)))
    env.RandLogNormal(1, 2) to env.Rand(LNORM(1, 2))
    env.RandLogNormal2(1, 2) to env.Rand(LNORM2(1, 2))
    etc.
    env.TimeoutUniformD(1, 2) to env.TimeoutD(UNIF(1, 2))
    env.TimeoutLogNormalD(1, 2) to env.TimeoutD(LNORM(1, 2))
    env.TimeoutLogNormal2D(1, 2) to env.Timeout(LNORM2(1, 2))
    etc.
    The RandChoice methods have been replaced with EmpiricalUniform and EmpiricalNonUniform distributions.

    All distributions also provide a static sampling method.

    The big improvement is that your process may be declared without needing to determine the actual random distribution.
    Thus Sim# 3.4 makes it simpler to parameterize processes with specific distributions.

    Distributions are lightweight classes, but Normal and LogNormal do contain state information as these use a cached
    value from the Marsaglia polar method. In case you reuse distribution instances among simulation runs you should
    call Reset() on all distribution instances of type IStatefulDistribution.
    </PackageReleaseNotes>
    <NeutralLanguage />
    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
    <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <IncludeSource>True</IncludeSource>
    <IncludeSymbols>True</IncludeSymbols>
    <NoWarn>$(NoWarn);1591;1734</NoWarn>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)'=='Debug'">
    <DefineConstants>DEBUG;TRACE</DefineConstants>
  </PropertyGroup>
  
  <PropertyGroup Condition="'$(Configuration)'=='Release'">
    <DefineConstants></DefineConstants>
  </PropertyGroup>

  <PropertyGroup>
    <DocumentationFile>bin\$(Configuration)\$(TargetFramework)\SimSharp.xml</DocumentationFile>
    <RepositoryUrl>https://github.com/heal-research/SimSharp.git</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageTags>discrete-event simulation</PackageTags>
  </PropertyGroup>

  <Target Name="CopyDocumentationFile" AfterTargets="ComputeFilesToPublish">
    <ItemGroup>
      <ResolvedFileToPublish Include="@(FinalDocFile)" RelativePath="@(FinalDocFile->'%(Filename)%(Extension)')" />
    </ItemGroup>
  </Target>

  <ItemGroup>
    <None Include="$(SolutionDir)..\LICENSE.txt" Pack="true" PackagePath="" />
  </ItemGroup>

  <ItemGroup>
    <Service Include="{508349b6-6b84-4df5-91f0-309beebad82d}" />
  </ItemGroup>
</Project>